- name: Create or Update Static RDP User (robust)
  shell: pwsh
  run: |
    # Read from GitHub secrets (recommended)
    $username = '${{ secrets.RDP_USERNAME }}'
    $password = '${{ secrets.RDP_PASSWORD }}'

    # Defensive checks
    if (-not $username -or $username.Trim().Length -eq 0) {
      Write-Error "RDP_USERNAME is empty or not provided. Set the secret 'RDP_USERNAME'."
      exit 1
    }

    if (-not $password -or $password.Trim().Length -eq 0) {
      Write-Error "RDP_PASSWORD is empty or not provided. Set the secret 'RDP_PASSWORD'."
      exit 1
    }

    # Detect common mistake: assigning masked log value '***'
    if ($password -eq '***' -or $username -eq '***') {
      Write-Error "Detected literal '***' for username or password. Do NOT hardcode or assign '***' â€” use real values or GitHub Secrets."
      exit 1
    }

    # Optional: enforce minimum length (adjust per your policy)
    if ($password.Length -lt 8) {
      Write-Error "Password must be at least 8 characters long."
      exit 1
    }

    # Convert to SecureString for New-LocalUser / Set-LocalUser
    try {
      $securePass = ConvertTo-SecureString $password -AsPlainText -Force
    } catch {
      Write-Error "Failed to convert password to SecureString: $_"
      exit 1
    }

    # Create or update the user
    try {
      $existing = Get-LocalUser -Name $username -ErrorAction SilentlyContinue
      if (-not $existing) {
        New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -UserMayNotChangePassword:$false
        Write-Host "Created local user: $username"
      } else {
        Set-LocalUser -Name $username -Password $securePass
        Write-Host "Updated password for existing user: $username"
      }

      # Ensure membership in groups (Remote Desktop Users required; Admin optional)
      if (-not (Get-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue)) {
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
      }
      if (-not (Get-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue)) {
        Add-LocalGroupMember -Group "Administrators" -Member $username
      }
    } catch {
      Write-Error "Failed to create or update user: $_"
      exit 1
    }

    # Export the username into job env if needed (do NOT export password unless you want it visible / masked)
    echo "RDP_USERNAME=$username" >> $env:GITHUB_ENV
